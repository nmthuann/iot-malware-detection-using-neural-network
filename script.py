import shutil
import os
import glob
import argparse
from numpy import random

#chọn dst cho dataset
dst_base =".\\dataset_1000"
dst_benign_1000 = dst_base +  "\\benign"
dst_malware_1000 = dst_base + "\\malware"
dst_test = ".\\test"

#thu thập tất cả các samples
benign_samples = glob.glob(".\\out\\benign\\*.png")
malware_samples = glob.glob(".\\out\\malware\\*.png")

def rem_all_file(path):
    files = glob.glob(path + "\\*")
    for file in files:
        os.remove(file)

def get_random_malware_sample(size=1000, replace = False):
    return random.choice(malware_samples, size, replace)

def get_random_benign_sample(size=1000, replace = False):
    return random.choice(benign_samples, size, replace)

def rem_dup_sample(dup_samples, samples):
    for ele in dup_samples:
        if (".\\out" + ele[14:]) in samples:
            samples.remove((".\\out" + ele[14:]))
    return samples

def get_random_test_sample(size=1000, replace = False):
    duplicate_benign_samples = glob.glob(".\\dataset_1000\\benign\\*.png")
    duplicate_malware_samples = glob.glob(".\\dataset_1000\\malware\\*.png")
    
    # loại bỏ các sample trùng với dataset_1000
    new_benign_samples = rem_dup_sample(duplicate_benign_samples, benign_samples)
    new_malware_samples = rem_dup_sample(duplicate_malware_samples, malware_samples)

    return random.choice(new_benign_samples, size, replace), random.choice(new_malware_samples, size, replace)

def main():

    parser = argparse.ArgumentParser(description="Tools to generate dataset and tests sample")
    parser.add_argument('type', metavar='type', type=str, help='generation type | all: genrate dataset and test | test: test only | train: train dataset only')
    parser.add_argument('--size',dest='size', type=int, default=1000, help='size per class')

    args = parser.parse_args()
    if args.type == 'train' or args.type == 'all':
        if not os.path.exists(dst_base):
            print("[!] Dataset not initialize")
            os.makedirs(dst_base)

        if not os.path.exists(dst_benign_1000):
            os.makedirs(dst_benign_1000)
        else:
            print("[+] Cleaning up benign sample")
            rem_all_file(dst_benign_1000)

        if not os.path.exists(dst_malware_1000):
            os.makedirs(dst_malware_1000)
        else:
            print("[+] Cleaning up malware sample")
            rem_all_file(dst_malware_1000)

        #copy từ src => dst
        random_benign_sample = get_random_benign_sample((2, args.size))
        random_malware_sample = get_random_malware_sample((2, args.size))

        for i in random_benign_sample[0]:
            shutil.copy(src=i, dst=dst_benign_1000)

        for i in random_malware_sample[0]:
            shutil.copy(src=i, dst=dst_malware_1000)

    if args.type == 'all':
        print("[+] Preparing test dataset")
        print("[+] Creating new test with size {} per class".format(args.size))
        if not os.path.exists(dst_test):
            os.makedirs(dst_test)
        else:
            shutil.rmtree(dst_test)

        os.makedirs(dst_test + "\\benign")
        os.makedirs(dst_test + "\\malware")

        for i in random_benign_sample[1]:
            shutil.copy(src=i, dst=dst_test + "\\benign")

        for i in random_malware_sample[1]:
            shutil.copy(src=i, dst=dst_test + "\\malware")

    if args.type == 'test':
        print("[+] Preparing test dataset")
        print("[+] Creating new test with size {} per class".format(args.size))
        if not os.path.exists(dst_test):
            os.makedirs(dst_test)
        else:
            shutil.rmtree(dst_test)

        os.makedirs(dst_test + "\\benign")
        os.makedirs(dst_test + "\\malware")

        random_test_samples = get_random_test_sample(args.size)

        for i in random_test_samples[0]:
            shutil.copy(src=i, dst=dst_test + "\\benign")

        for i in random_test_samples[1]:
            shutil.copy(src=i, dst=dst_test + "\\malware")


if __name__ == "__main__":
    main()